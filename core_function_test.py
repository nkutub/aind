
import unittest
import solution

class TestCoreNakedTwinsFunctions(unittest.TestCase):
    """
    test the core functions needed for naked twins
    """
    before_naked_twins_1 = {'I6': '4', 'H9': '3', 'I2': '6', 'E8': '1', 'H3': '5', 'H7': '8', 'I7': '1', 'I4': '8',
                            'H5': '6', 'F9': '7', 'G7': '6', 'G6': '3', 'G5': '2', 'E1': '8', 'G3': '1', 'G2': '8',
                            'G1': '7', 'I1': '23', 'C8': '5', 'I3': '23', 'E5': '347', 'I5': '5', 'C9': '1', 'G9': '5',
                            'G8': '4', 'A1': '1', 'A3': '4', 'A2': '237', 'A5': '9', 'A4': '2357', 'A7': '27',
                            'A6': '257', 'C3': '8', 'C2': '237', 'C1': '23', 'E6': '579', 'C7': '9', 'C6': '6',
                            'C5': '37', 'C4': '4', 'I9': '9', 'D8': '8', 'I8': '7', 'E4': '6', 'D9': '6', 'H8': '2',
                            'F6': '125', 'A9': '8', 'G4': '9', 'A8': '6', 'E7': '345', 'E3': '379', 'F1': '6',
                            'F2': '4', 'F3': '23', 'F4': '1235', 'F5': '8', 'E2': '37', 'F7': '35', 'F8': '9',
                            'D2': '1', 'H1': '4', 'H6': '17', 'H2': '9', 'H4': '17', 'D3': '2379', 'B4': '27',
                            'B5': '1', 'B6': '8', 'B7': '27', 'E9': '2', 'B1': '9', 'B2': '5', 'B3': '6', 'D6': '279',
                            'D7': '34', 'D4': '237', 'D5': '347', 'B8': '3', 'B9': '4', 'D1': '5'}

    before_naked_twins_1_boxes = {'A7': ['A7', 'B7', 'C7', 'D7', 'E7', 'F7', 'G7', 'H7', 'I7'],
                                  'B4': ['B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9'],
                                  'B7': ['B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9'],
                                  'C1': ['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1'],
                                  'F3': ['A3', 'B3', 'C3', 'D3', 'E3', 'F3', 'G3', 'H3', 'I3'],
                                  'H4': ['H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'H7', 'H8', 'H9'],
                                  'H6': ['H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'H7', 'H8', 'H9'],
                                  'I1': ['I1', 'I2', 'I3', 'I4', 'I5', 'I6', 'I7', 'I8', 'I9'],
                                  'I3': ['I1', 'I2', 'I3', 'I4', 'I5', 'I6', 'I7', 'I8', 'I9']}

    before_super_naked_twins = {"G7": "1234568", "G6": "9", "G5": "35678", "G4": "23678", "G3":
                                "245678", "G2": "123568", "G1": "1234678", "G9": "12345678", "G8":
                                "1234567", "C9": "13456", "C8": "13456", "C3": "4678", "C2": "68",
                                "C1": "4678", "C7": "13456", "C6": "368", "C5": "2", "A4": "5", "A9":
                                "2346", "A8": "2346", "F1": "123689", "F2": "7", "F3": "25689", "F4":
                                "23468", "F5": "1345689", "F6": "23568", "F7": "1234568", "F8":
                                "1234569", "F9": "1234568", "B4": "46", "B5": "46", "B6": "1", "B7":
                                "7", "E9": "12345678", "B1": "5", "B2": "2", "B3": "3", "C4": "9",
                                "B8": "8", "B9": "9", "I9": "1235678", "I8": "123567", "I1": "123678",
                                "I3": "25678", "I2": "123568", "I5": "35678", "I4": "23678", "I7":
                                "9", "I6": "4", "A1": "2468", "A3": "1", "A2": "9", "A5": "3468",
                                "E8": "12345679", "A7": "2346", "A6": "7", "E5": "13456789", "E4":
                                "234678", "E7": "1234568", "E6": "23568", "E1": "123689", "E3":
                                "25689", "E2": "123568", "H8": "234567", "H9": "2345678", "H2":
                                "23568", "H3": "2456789", "H1": "2346789", "H6": "23568", "H7":
                                "234568", "H4": "1", "H5": "35678", "D8": "1235679", "D9": "1235678",
                                "D6": "23568", "D7": "123568", "D4": "23678", "D5": "1356789", "D2":
                                "4", "D3": "25689", "D1": "123689"}


    def test_find_naked_twins(self):
        """
        test the find_naked_twins function
        """
        self.assertEqual(solution.find_naked_twins(self.before_naked_twins_1), self.before_naked_twins_1_boxes)

    def test_super_naked_twins(self):
        solution.display(self.before_super_naked_twins)

class TestCoreFunctions(unittest.TestCase):
    """
    test the core functions needed to model encode the sudoku
    """
    boxes = ['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9',
             'B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9',
             'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9',
             'D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7', 'D8', 'D9',
             'E1', 'E2', 'E3', 'E4', 'E5', 'E6', 'E7', 'E8', 'E9',
             'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9',
             'G1', 'G2', 'G3', 'G4', 'G5', 'G6', 'G7', 'G8', 'G9',
             'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'H7', 'H8', 'H9',
             'I1', 'I2', 'I3', 'I4', 'I5', 'I6', 'I7', 'I8', 'I9']

    def test_cross(self):
        """
        test the corss function
        """
        self.assertEqual(solution.cross(solution.ROWS, solution.COLS), self.boxes)

    def test_grid_values(self):
        """
        test the grid_values function
        """
        sudoku_grid = '..3.2.6..9..3.5..1..18.64....81.29..7.......8..67.82....26.95..8..2.3..9..5.1.3..'
        sudoku_dict = {'C7': '4', 'I6': '123456789', 'E7': '123456789', 'E6': '123456789',
                       'F6': '8', 'H6': '3', 'C9': '123456789', 'E4': '123456789', 'E9': '8',
                       'G7': '5', 'A3': '3', 'H2': '123456789', 'G8': '123456789', 'B5': '123456789',
                       'G5': '123456789', 'G1': '123456789', 'A2': '123456789', 'F7': '2', 'F4': '7',
                       'B2': '123456789', 'H7': '123456789', 'G2': '123456789', 'I8': '123456789', 'H9': '9',
                       'B7': '123456789', 'E2': '123456789', 'F9': '123456789', 'I7': '3', 'F3': '6', 'I9': '123456789',
                       'D8': '123456789', 'G9': '123456789', 'F1': '123456789', 'D5': '123456789', 'B4': '3', 'H5': '123456789',
                       'I2': '123456789', 'A6': '123456789', 'G3': '2', 'H8': '123456789', 'H4': '2', 'A4': '123456789', 'A9': '123456789',
                       'D9': '123456789', 'I3': '5', 'E1': '7', 'C2': '123456789', 'F8': '123456789', 'B8': '123456789', 'A7': '6',
                       'C1': '123456789', 'D2': '123456789', 'C5': '123456789', 'H3': '123456789', 'B1': '9', 'I5': '1', 'A8': '123456789',
                       'A5': '2', 'F2': '123456789', 'A1': '123456789', 'D7': '9', 'G4': '6', 'H1': '8', 'C8': '123456789',
                       'E5': '123456789', 'C3': '1', 'C6': '6', 'D3': '8', 'D4': '1', 'D1': '123456789', 'I1': '123456789',
                       'B3': '123456789', 'B6': '5', 'G6': '9', 'I4': '123456789', 'F5': '123456789', 'B9': '1', 'C4': '8',
                       'E8': '123456789', 'D6': '2', 'E3': '123456789'}

        self.assertEqual(solution.grid_values(sudoku_grid), sudoku_dict)

if __name__ == '__main__':
    unittest.main()

